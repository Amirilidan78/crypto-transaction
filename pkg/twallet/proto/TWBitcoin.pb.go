// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.9.0
// source: TWBitcoin.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BtcTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction data format version.
	Version int32 `protobuf:"zigzag32,1,opt,name=version,proto3" json:"version,omitempty"`
	// The block number or timestamp at which this transaction is unlocked.
	LockTime uint32 `protobuf:"varint,2,opt,name=lockTime,proto3" json:"lockTime,omitempty"`
	// A list of 1 or more transaction inputs or sources for coins.
	Inputs []*BtcTransactionInput `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// A list of 1 or more transaction outputs or destinations for coins
	Outputs []*BtcTransactionOutput `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *BtcTransaction) Reset() {
	*x = BtcTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TWBitcoin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcTransaction) ProtoMessage() {}

func (x *BtcTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TWBitcoin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcTransaction.ProtoReflect.Descriptor instead.
func (*BtcTransaction) Descriptor() ([]byte, []int) {
	return file_TWBitcoin_proto_rawDescGZIP(), []int{0}
}

func (x *BtcTransaction) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BtcTransaction) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *BtcTransaction) GetInputs() []*BtcTransactionInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *BtcTransaction) GetOutputs() []*BtcTransactionOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// Bitcoin transaction input.
type BtcTransactionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the previous transaction's output.
	PreviousOutput *BtcOutPoint `protobuf:"bytes,1,opt,name=previousOutput,proto3" json:"previousOutput,omitempty"`
	// Transaction version as defined by the sender.
	Sequence uint32 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Computational script for confirming transaction authorization.
	Script []byte `protobuf:"bytes,3,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *BtcTransactionInput) Reset() {
	*x = BtcTransactionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TWBitcoin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcTransactionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcTransactionInput) ProtoMessage() {}

func (x *BtcTransactionInput) ProtoReflect() protoreflect.Message {
	mi := &file_TWBitcoin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcTransactionInput.ProtoReflect.Descriptor instead.
func (*BtcTransactionInput) Descriptor() ([]byte, []int) {
	return file_TWBitcoin_proto_rawDescGZIP(), []int{1}
}

func (x *BtcTransactionInput) GetPreviousOutput() *BtcOutPoint {
	if x != nil {
		return x.PreviousOutput
	}
	return nil
}

func (x *BtcTransactionInput) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *BtcTransactionInput) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

// Bitcoin transaction out-point reference.
type BtcOutPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the referenced transaction.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The index of the specific output in the transaction.
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// Transaction version as defined by the sender.
	Sequence uint32 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *BtcOutPoint) Reset() {
	*x = BtcOutPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TWBitcoin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcOutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcOutPoint) ProtoMessage() {}

func (x *BtcOutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_TWBitcoin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcOutPoint.ProtoReflect.Descriptor instead.
func (*BtcOutPoint) Descriptor() ([]byte, []int) {
	return file_TWBitcoin_proto_rawDescGZIP(), []int{2}
}

func (x *BtcOutPoint) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BtcOutPoint) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BtcOutPoint) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// Bitcoin transaction output.
type BtcTransactionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction amount.
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Usually contains the public key as a Bitcoin script setting up conditions to claim this output.
	Script []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *BtcTransactionOutput) Reset() {
	*x = BtcTransactionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TWBitcoin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcTransactionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcTransactionOutput) ProtoMessage() {}

func (x *BtcTransactionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_TWBitcoin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcTransactionOutput.ProtoReflect.Descriptor instead.
func (*BtcTransactionOutput) Descriptor() ([]byte, []int) {
	return file_TWBitcoin_proto_rawDescGZIP(), []int{3}
}

func (x *BtcTransactionOutput) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BtcTransactionOutput) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

// An unspent transaction output, that can serve as input to a transaction
type BtcUnspentTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unspent output
	OutPoint *BtcOutPoint `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	// Script for claiming this UTXO
	Script []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	// Amount of the UTXO
	Amount int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *BtcUnspentTransaction) Reset() {
	*x = BtcUnspentTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TWBitcoin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcUnspentTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcUnspentTransaction) ProtoMessage() {}

func (x *BtcUnspentTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TWBitcoin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcUnspentTransaction.ProtoReflect.Descriptor instead.
func (*BtcUnspentTransaction) Descriptor() ([]byte, []int) {
	return file_TWBitcoin_proto_rawDescGZIP(), []int{4}
}

func (x *BtcUnspentTransaction) GetOutPoint() *BtcOutPoint {
	if x != nil {
		return x.OutPoint
	}
	return nil
}

func (x *BtcUnspentTransaction) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *BtcUnspentTransaction) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Input data necessary to create a signed transaction.
type BtcSigningInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash type to use when signing.
	HashType uint32 `protobuf:"varint,1,opt,name=hash_type,json=hashType,proto3" json:"hash_type,omitempty"`
	// Amount to send.  Transaction created will have this amount in its output,
	// except when use_max_amount is set, in that case this amount is not relevant, maximum possible amount will be used (max avail less fee).
	// If amount is equal or more than the available amount, also max amount will be used.
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Transaction fee per byte.
	ByteFee int64 `protobuf:"varint,3,opt,name=byte_fee,json=byteFee,proto3" json:"byte_fee,omitempty"`
	// Recipient's address.
	ToAddress string `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Change address.
	ChangeAddress string `protobuf:"bytes,5,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	// Available private keys.
	PrivateKey [][]byte `protobuf:"bytes,6,rep,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Available redeem scripts indexed by script hash.
	Scripts map[string][]byte `protobuf:"bytes,7,rep,name=scripts,proto3" json:"scripts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Available unspent transaction outputs.
	Utxo []*BtcUnspentTransaction `protobuf:"bytes,8,rep,name=utxo,proto3" json:"utxo,omitempty"`
	// If sending max amount.
	UseMaxAmount bool `protobuf:"varint,9,opt,name=use_max_amount,json=useMaxAmount,proto3" json:"use_max_amount,omitempty"`
	// Coin type (forks).
	CoinType uint32 `protobuf:"varint,10,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`
	// Optional transaction plan
	Plan *BtcTransactionPlan `protobuf:"bytes,11,opt,name=plan,proto3" json:"plan,omitempty"`
	// Optional lockTime, default value 0 means no time locking.
	// If all inputs have final (`0xffffffff`) sequence numbers then `lockTime` is irrelevant.
	// Otherwise, the transaction may not be added to a block until after `lockTime`.
	//  value  < 500000000 : Block number at which this transaction is unlocked
	//  value >= 500000000 : UNIX timestamp at which this transaction is unlocked
	LockTime uint32 `protobuf:"varint,12,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
}

func (x *BtcSigningInput) Reset() {
	*x = BtcSigningInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TWBitcoin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcSigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcSigningInput) ProtoMessage() {}

func (x *BtcSigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_TWBitcoin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcSigningInput.ProtoReflect.Descriptor instead.
func (*BtcSigningInput) Descriptor() ([]byte, []int) {
	return file_TWBitcoin_proto_rawDescGZIP(), []int{5}
}

func (x *BtcSigningInput) GetHashType() uint32 {
	if x != nil {
		return x.HashType
	}
	return 0
}

func (x *BtcSigningInput) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BtcSigningInput) GetByteFee() int64 {
	if x != nil {
		return x.ByteFee
	}
	return 0
}

func (x *BtcSigningInput) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *BtcSigningInput) GetChangeAddress() string {
	if x != nil {
		return x.ChangeAddress
	}
	return ""
}

func (x *BtcSigningInput) GetPrivateKey() [][]byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *BtcSigningInput) GetScripts() map[string][]byte {
	if x != nil {
		return x.Scripts
	}
	return nil
}

func (x *BtcSigningInput) GetUtxo() []*BtcUnspentTransaction {
	if x != nil {
		return x.Utxo
	}
	return nil
}

func (x *BtcSigningInput) GetUseMaxAmount() bool {
	if x != nil {
		return x.UseMaxAmount
	}
	return false
}

func (x *BtcSigningInput) GetCoinType() uint32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

func (x *BtcSigningInput) GetPlan() *BtcTransactionPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *BtcSigningInput) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

// Describes a preliminary transaction plan.
type BtcTransactionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount to be received at the other end.
	Amount int64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Maximum available amount.
	AvailableAmount int64 `protobuf:"varint,2,opt,name=available_amount,json=availableAmount,proto3" json:"available_amount,omitempty"`
	// Estimated transaction fee.
	Fee int64 `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// Change.
	Change int64 `protobuf:"varint,4,opt,name=change,proto3" json:"change,omitempty"`
	// Selected unspent transaction outputs.
	Utxos []*BtcUnspentTransaction `protobuf:"bytes,5,rep,name=utxos,proto3" json:"utxos,omitempty"`
	// Zcash branch id
	BranchId []byte `protobuf:"bytes,6,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	// Optional error
	Error SigningError `protobuf:"varint,7,opt,name=error,proto3,enum=proto.SigningError" json:"error,omitempty"`
}

func (x *BtcTransactionPlan) Reset() {
	*x = BtcTransactionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TWBitcoin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcTransactionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcTransactionPlan) ProtoMessage() {}

func (x *BtcTransactionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_TWBitcoin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcTransactionPlan.ProtoReflect.Descriptor instead.
func (*BtcTransactionPlan) Descriptor() ([]byte, []int) {
	return file_TWBitcoin_proto_rawDescGZIP(), []int{6}
}

func (x *BtcTransactionPlan) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BtcTransactionPlan) GetAvailableAmount() int64 {
	if x != nil {
		return x.AvailableAmount
	}
	return 0
}

func (x *BtcTransactionPlan) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *BtcTransactionPlan) GetChange() int64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *BtcTransactionPlan) GetUtxos() []*BtcUnspentTransaction {
	if x != nil {
		return x.Utxos
	}
	return nil
}

func (x *BtcTransactionPlan) GetBranchId() []byte {
	if x != nil {
		return x.BranchId
	}
	return nil
}

func (x *BtcTransactionPlan) GetError() SigningError {
	if x != nil {
		return x.Error
	}
	return SigningError_OK
}

// Transaction signing output.
type BtcSigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resulting transaction. Note that the amount may be different than the requested amount to account for fees and available funds.
	Transaction *BtcTransaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// Signed and encoded transaction bytes.
	Encoded []byte `protobuf:"bytes,2,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// Transaction id
	TransactionId string `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Optional error
	Error SigningError `protobuf:"varint,4,opt,name=error,proto3,enum=proto.SigningError" json:"error,omitempty"`
}

func (x *BtcSigningOutput) Reset() {
	*x = BtcSigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TWBitcoin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcSigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcSigningOutput) ProtoMessage() {}

func (x *BtcSigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_TWBitcoin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcSigningOutput.ProtoReflect.Descriptor instead.
func (*BtcSigningOutput) Descriptor() ([]byte, []int) {
	return file_TWBitcoin_proto_rawDescGZIP(), []int{7}
}

func (x *BtcSigningOutput) GetTransaction() *BtcTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *BtcSigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *BtcSigningOutput) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *BtcSigningOutput) GetError() SigningError {
	if x != nil {
		return x.Error
	}
	return SigningError_OK
}

var File_TWBitcoin_proto protoreflect.FileDescriptor

var file_TWBitcoin_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x54, 0x57, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x42, 0x74, 0x63, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x74, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x74, 0x63,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x42,
	0x74, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x74, 0x63, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0e,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x22, 0x53, 0x0a, 0x0b, 0x42, 0x74, 0x63, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x14, 0x42, 0x74, 0x63, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x78, 0x0a,
	0x15, 0x42, 0x74, 0x63, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x74, 0x63, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x84, 0x04, 0x0a, 0x0f, 0x42, 0x74, 0x63, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x74, 0x63, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x74, 0x78, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x74, 0x63, 0x55, 0x6e, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x75,
	0x74, 0x78, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x4d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x74, 0x63,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfd,
	0x01, 0x0a, 0x12, 0x42, 0x74, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x74, 0x63, 0x55, 0x6e, 0x73,
	0x70, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb7,
	0x01, 0x0a, 0x10, 0x42, 0x74, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x74, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x13, 0x5a, 0x11, 0x70, 0x6b, 0x67, 0x2f,
	0x74, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_TWBitcoin_proto_rawDescOnce sync.Once
	file_TWBitcoin_proto_rawDescData = file_TWBitcoin_proto_rawDesc
)

func file_TWBitcoin_proto_rawDescGZIP() []byte {
	file_TWBitcoin_proto_rawDescOnce.Do(func() {
		file_TWBitcoin_proto_rawDescData = protoimpl.X.CompressGZIP(file_TWBitcoin_proto_rawDescData)
	})
	return file_TWBitcoin_proto_rawDescData
}

var file_TWBitcoin_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_TWBitcoin_proto_goTypes = []interface{}{
	(*BtcTransaction)(nil),        // 0: proto.BtcTransaction
	(*BtcTransactionInput)(nil),   // 1: proto.BtcTransactionInput
	(*BtcOutPoint)(nil),           // 2: proto.BtcOutPoint
	(*BtcTransactionOutput)(nil),  // 3: proto.BtcTransactionOutput
	(*BtcUnspentTransaction)(nil), // 4: proto.BtcUnspentTransaction
	(*BtcSigningInput)(nil),       // 5: proto.BtcSigningInput
	(*BtcTransactionPlan)(nil),    // 6: proto.BtcTransactionPlan
	(*BtcSigningOutput)(nil),      // 7: proto.BtcSigningOutput
	nil,                           // 8: proto.BtcSigningInput.ScriptsEntry
	(SigningError)(0),             // 9: proto.SigningError
}
var file_TWBitcoin_proto_depIdxs = []int32{
	1,  // 0: proto.BtcTransaction.inputs:type_name -> proto.BtcTransactionInput
	3,  // 1: proto.BtcTransaction.outputs:type_name -> proto.BtcTransactionOutput
	2,  // 2: proto.BtcTransactionInput.previousOutput:type_name -> proto.BtcOutPoint
	2,  // 3: proto.BtcUnspentTransaction.out_point:type_name -> proto.BtcOutPoint
	8,  // 4: proto.BtcSigningInput.scripts:type_name -> proto.BtcSigningInput.ScriptsEntry
	4,  // 5: proto.BtcSigningInput.utxo:type_name -> proto.BtcUnspentTransaction
	6,  // 6: proto.BtcSigningInput.plan:type_name -> proto.BtcTransactionPlan
	4,  // 7: proto.BtcTransactionPlan.utxos:type_name -> proto.BtcUnspentTransaction
	9,  // 8: proto.BtcTransactionPlan.error:type_name -> proto.SigningError
	0,  // 9: proto.BtcSigningOutput.transaction:type_name -> proto.BtcTransaction
	9,  // 10: proto.BtcSigningOutput.error:type_name -> proto.SigningError
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_TWBitcoin_proto_init() }
func file_TWBitcoin_proto_init() {
	if File_TWBitcoin_proto != nil {
		return
	}
	file_Common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TWBitcoin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TWBitcoin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcTransactionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TWBitcoin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcOutPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TWBitcoin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcTransactionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TWBitcoin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcUnspentTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TWBitcoin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcSigningInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TWBitcoin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcTransactionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TWBitcoin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcSigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TWBitcoin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TWBitcoin_proto_goTypes,
		DependencyIndexes: file_TWBitcoin_proto_depIdxs,
		MessageInfos:      file_TWBitcoin_proto_msgTypes,
	}.Build()
	File_TWBitcoin_proto = out.File
	file_TWBitcoin_proto_rawDesc = nil
	file_TWBitcoin_proto_goTypes = nil
	file_TWBitcoin_proto_depIdxs = nil
}
